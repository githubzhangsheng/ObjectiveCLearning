//
//  main.m
//  Day01-OC基础语法
//
//  Created by a on 2019/6/10.
//  Copyright © 2019年 Jamie. All rights reserved.
//


/*
 1. OC相对于C
    a. 在C的基础之上新增了一小部分面向对象的语法。
    b. 将C的复杂的、繁琐的语法封装的更为简单
    c. OC完全兼容C语言
 2. OC程序的源文件的后缀名是.m m代表 message 代表 OC 中最重要的一个机制叫做消息机制。
    C 程序的源文件的后缀名是.c
 
 3. main 函数仍然是OC程序的入口和出口。
    int 类型的返回值，代表程序的结束状态。
    mian 函数的参数：仍然可以接收用户在运行程序的时候传递数据给程序内部。
                   参数也可以不要。
 4. #import指令。
    1).以#号开头，是一个预处理指令（在编译之前）。
    2).作用: 是 #include 指令的增强版，将文件的内容在预编译的时候拷贝到写指令的地方。
    3).增强：同一个文件无论 #import 多少次，只会包含一次。
            如果 #include 指令要实现这个效果，就必须要配合条件编译指令来实现。
            而 #import 指令只需要直接包含就可以了，其他什么都不用做
    4).简要原理: #import 指令在包含文件的时候，底层会先判断这个文件是否被包含，如果被包含就会被略过，否则才会包含。
 
 5. 框架
    1). 他是一个功能集合,苹果或者第三方事先将一些程序员在开发程序经常要使用的功能事先写好,把这些功能封装在一个一个的类或者函数之中,
        这些函数和类的集合就叫做框架。
 
        有点像 C 语言的函数库。
 
    2). Foundation 框架
        Foundation: 基础，基本。这个框架当中提供了一些最基础的功能，包括输入和输出，还有一些数据类型。
        Foundation.h 这个文件当中包含了 Foundation 框架当中的其他的所有的头文件。
        所以，我们只要包含 Foundation.h 就相当于包含了 Foundation 框架中所有的头文件。
        那么 Foundation 框架中的所有的函数和类就可以直接使用
 
 6. @autoreleasepool 是自动释放池。
    你只需要知道这是一个自动释放池就可以了，目前无需过多的理解。
    你可以将代码写在自动释放池之中，或者干脆把这个自动释放池删除，目前不会有任何影响。
 
 7. NSLog 函数
    1). 作用:是printf函数的增强版，向控制台输出信息。
    2). 语法: NSLog(@"格式控制字符串",变量列表);
        最简单的语法: NSLog(@"要输出的信息");
    3). 增强:
         a. 输出一些调试相关的信息。
            2019-06-10 10:35:15.816290+0800 Day01-OC基础语法[5657:571163] Hello, World!
            程序执行的时间
            程序执行的名称
            进程的编号:线程的编号
            输出的信息
         b. 输出完信息后,会自动换行
         c. OC中新增了一些数据类型，NSLog函数不仅仅可以输出C数据类型变量的值，还可以输出OC新增的数据类型的值。
    4). 用法和printf函数差不多. 一样可以输出变量的值，并且占位符和用法都一样。
         a. NSLog 函数的第一个参数面签必须要加一个@符号
         b. 如果手贱在字符串的末尾加了一个\n代表换行，那么函数的自动换行就自动失效。
 
 
 -----
 忘记#include 用#import
 忘记printf 用NSLog
 
8. 字符串
    1). C 语言的字符串的存储方式
        a. 使用字符数组存储
        b. 使用字符指针
    2). OC中设计了一个更为好用的用来存储字符串的一个类型 NSString
        NSString 类型的指针变量，专门用来存储OC字符串地址
    3). OC字符串常量必须要使用一个前缀@符号
        “jack” 这是一个C语言的字符串
        @“jack” 这是一个OC的字符串常量
        NSString 类型的指针变量，只能存储OC字符串的地址。
        NSString *str = @"jack";
    4). 总结
        a. 在OC中专门设计了一个NSString类型来存储字符串
        b. 字符串分为C字符串和OC字符串
           字符串如果没有@前缀，那么这个字符串常量就是一个C字符串。
           字符串如果有@前缀，那么这个字符串就是一个OC字符串。
           所以，OC字符串常量的前面必须要加一个@符号。
        c. NSString类型的指针变量，只能存储OC字符串。
           NSString *str = @"jack";
    5). 注意
        a. NSLog 函数的第一个参数是一个OC字符串，所以NSLog函数的第一个实参应该以@符号来开头。
        b. 如果要使用NSLog函数输出OC字符串的值，那额使用占位符 %@
 
 9. NS前缀
    NextStep --> Cocoa ---> Foundation框架之中。
 10.@符号
    1). 将C字符串转换为OC字符串  “jack" @"jack"
    2). OC中的大部分关键字都是以@符号开头
 
 11. OC中的注释和C语言的注释一模一样，分为单行注释和多行注释
 
 12. 函数的定义和调用
     与C语言的函数的定义和调用时一样的。
 
 
 
 
 
 */
#import <Foundation/Foundation.h>

void test();

int main(int argc, const char * argv[]) {
    test();
    NSString *str = @"jack";
    NSLog(@"大家好，我叫%@",str);
    return 0;
}

void test(){
    NSLog(@"今天是第一天的OC课程，大家还好吗？");
}
