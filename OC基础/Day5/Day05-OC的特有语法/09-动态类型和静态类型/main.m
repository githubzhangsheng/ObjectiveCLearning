//
//  main.m
//  09-动态类型和静态类型
//
//  Created by a on 2019/8/3.
//  Copyright © 2019 Jamie. All rights reserved.
//


/*
 1. OC是一门弱语言。
    编译器在编译的时候，检查的时候没有那么严格
    不管你怎么写都是可以的。
 
    优点：灵活，怎么写都行
    强类型语言： 编译器在编译的时候，做语法检查的时候，比较严格
 
 2. 静态类型
    指的是一个指针指向的对象是一个本类对象
 
 3. 动态类型
    指的是一个指针指向的对象不是本类对象。
 
 4. 编译检查
    编译器在编译的时候，能不能通过一个指针去调用指针指向的对象的方法。
    判断原则：看指针所属的类型之中，是否有这个方法，如果有就认为可以调用，编译通过
            如果这个类中没有，则编译报错。
 
    这个叫做编译检查，在编译的时候，能不能调用对象的方法主要是看指针的类型。
    我们可以将指针的类型做转换来达到骗过编译器的目的。
 
 
 5. 运行检查
    编译检查只是骗过了编译器，但是这个方法究竟能不能执行，
    所以在运行的时候，运行时会检查对象中是否真的有这个方法，如果有就执行，如果没有就报错。
 6. LSP
    父类指针指向子类对象
    实际上任意的指针可以指向任意的对象，编译器不会报错的。
    当一个子类指针指向一个父类对象的时候，编译器同意通过子类指针去调用子类独有的方法
    但是在运行的时候会出问题，因为父类对象中根本没有子类成员。
 
 */
#import <Foundation/Foundation.h>
#import "Pig.h"
int main(int argc, const char * argv[]) {
    

    // 静态类型
//    Animal *a1 = [Animal new];
//    [a1 run];
    
    // 动态类型
    //    Animal *a2 = [Pig new];
    
    Animal *a1 = [Pig new];
    [(Pig *)a1 eat];
    
}
