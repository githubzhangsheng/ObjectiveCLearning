//
//  main.m
//  05-野指针和僵尸对象
//
//  Created by a on 2019/10/11.
//  Copyright © 2019 Jamie. All rights reserved.
//

/*
 1. 野指针
    C语言中的野指针：定义一个指针变量，这个指针没有初始化，这个指针变量的值是垃圾值，指向一块随机的空间，这个指针就叫做野指针。
    OC中的野指针：指针指向的对象已经被回收了,这样的指针叫做野指针
 
 2. 对象回收的本质
    内存回收的本质：申请一个变量，实际上就是向系统申请指定字节数的空间，这些空间系统不会再分配给别人了。
    当变量被回收的时候，代表变量占用的字节空间从此以后系统就可以分配给别人使用了。
    但是字节空间中存储的数据还在。
 
 
    回收对象：
    所谓的对象的回收，指的是对象占用的空间可以分配给别人
    当这个对象占用的空间没有分配给别人之前，其实对象的数据还在。
    
 
 3. 僵尸对象
    1个已经被释放的对象，但是这个对象所占的空间还没有分配给别人，这样的对象叫做僵尸对象
    我们通过野指针去访问僵尸对象的时候，有可能没问题，也有可能没问题
    当僵尸对象占用的空间还没有分配给别人的时候，这是可以的。
    当僵尸对象占用的空间分配给了别人使用的时候，就不可以了。
 
 4. 我们认为只要对象成为了僵尸对象，无论如何都不允许访问了。
    就希望如果访问的是僵尸对象，无论如何报错。
 
    僵尸对象的实时检查机制。可以将机制打开，打开之后，只要访问的是僵尸对象，无论空间是否分配，就会报错。可以在target的内存管理中设置打开僵尸对象检测。

 5. 为什么不默认打开僵尸对象的检测
    一旦打开僵尸对象的检测，那么在每访问一个对象的时候，都会先检查这个对象是否为一个僵尸对象，这样是极其消耗性能的
 
 6. 使用野指针访问僵尸对象会报错。如何避免僵尸对象错误
    当一个指针成为野指针以后，将这个指针的值设置为 nil
    当一个指针的值为nil, 通过这个指针去调用对象的方法的时候（包括使用点语法），不会报错，只是没有任何反应。
    但是通过指针直接访问属性，就会报错。
 
 
 7. 无法通过retain来复活一个僵尸对象
 */
#import <Foundation/Foundation.h>
#import "Person.h"
int main(int argc, const char * argv[]) {
//    Person *p1 = [Person new];
//    [p1 sayHi];
//
//
//    [p1 release];
//
//    p1 = nil;
//
//    [p1 sayHi];
    
    Person *p1 = [Person new]; //1
    [p1 release]; // 0 对象
    [p1 retain]; // 想要复活僵尸对象，使用不合法 X
    return 0;
}
