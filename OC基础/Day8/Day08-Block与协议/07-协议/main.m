//
//  main.m
//  07-协议
//
//  Created by a on 2019/10/16.
//  Copyright © 2019 Jamie. All rights reserved.
//


/*
 1. 协议：protocol
 
 作用：专门用来声明一大堆方法，（不能声明属性，也不能实现方法，只能用来写方法的声明）
      只要某个类遵守了这个协议，就相当于拥有这个协议中的所有的方法的声明。
 
 2. 协议的声明
    @protocol 协议名称  <NSObject>
 
    方法的声明
 
    @end
 
    新建一个协议的方式： NewFile - OC-File - protocol
    协议的文件名： .h 并且只有一个 .h 文件
    在协议中，只能用来声明方法，协议的作用：就是专门用来写方法声明的。
 
 3. 类遵守协议
    协议就是用来写方法声明的，就是用来被类遵守的。
 
    如果想要一个类，拥有协议中定义的所有的方法声明，那么就让这个类遵守这个协议
    类只要遵守一个协议，那么这个类就拥有了这些协议中定义的所有的方法的声明了。
 
    @interface 类名 ： 父类名<协议名称>
    @end
 
    : 表示继承
    <> 表示遵守的协议
 
    当一个类，遵守了一个协议,那么久相当于这个类拥有了协议中定义的所有的方法的声明。
    这个类只是拥有了这个协议中的方法的声明而已，没有实现。所以这个类，就应该实现协议中的方法
 
    如果不实现，其实也不会报错，编译器只是会警告。
    但是当创建对象，来调用这个没有实现的协议中的方法的时候，就会报错。
 
 4. 类是单继承，但是协议可以多遵守
    一个类只能有一个父类，但是一个类可以遵守多个协议。
 
    @interface 类名:父类名 <协议名称1，协议名称2，...>
    @end
 
    当一个类遵守了多个协议之后，就相当于这个类拥有了所有协议中定义的方法的声明。
    但仅仅是方法的声明而已，没有实现，要类自己去实现。
    那么这个类，就应该实现所有协议中的方法。
 
    如果不实现，其实也不会报错，编译器只是会警告。
    但是当创建对象，来调用这个没有实现的协议中的方法的时候，就会报错。
 
 
 5. @required 与 @optional
    @required 与 @optional 这两个修饰符是专门用来修饰协议中的方法的。
    
    在协议中，如果方法的声明被@required修饰，那么遵守这个协议的类必须实现这个方法，否则编译器会发出警告。
    在协议中，如果方法的声明被@optional修饰，那么遵守这个协议的类如果不实现这个方法，编译器也不会报警告。
 
    这两个关键字的主要作用在于程序员之间沟通，告诉遵守协议的类，哪些方法是必须要实现的，因为这些方法我会调用，没有实现的话调用时候会报错。
 
    默认是@required
 
 
 6. 协议可以从另外一个协议继承，并且可以多继承。
 
    协议可以继承另外一个协议，A协议继承了B协议，那么A协议中不仅有自己的方法的声明，还有B协议中的方法的声明。
 
 
 
 */

#import <Foundation/Foundation.h>
#import "MyProtocol.h"
#import "Dog.h"
int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // insert code here...
        NSLog(@"Hello, World!");
    }
    Dog *d1 = [Dog new];
    [d1 run];
    [d1 sleep];
    [d1 eat];
    return 0;
}
